Для выполнения Node нужно выполнить команду:

roscore

Тем самым мы сэмулировли среду, в которой могут общаться Ноды
Предварительно устанавливаем пакет turtlesim

$ sudo apt-get install ros-$(rosversion -d)-turtlesim

Чтобы непосредственно выполнить определённую ноду(пакет turtlesim), нужно выполнить команду:

rosrun turtlesim turtlesim_node

Сообщение черепаше двигаться

ros turtlesim turtle_teleop_key

C помощью данной команды мы осуществили управление черепашкой на клавиатуре.

Теперь с помощью команды
rosnode list
мы узнаем, какие команды существовали

Запустив ещё раз Ноду
rosrun turtlesim turtlesim_node
Мы перезапустили первый интерфейс с черепашой - таким образом мы узнали, что разным нодам за одинаковой командой нужно 
присваивать разные имена
Чтобы это сделать, пишем

rosrun turtlesim turtlesim_node __name:=tursim_node_second

Открылось 2 интерфейса 
rosnode list выдаёт нам теперь 4 нода

Чтобы узнать информациб о конкретной Ноде выполнеяем команду rosnode info turtlesim
Это даёт наминформацию о том, на какие топики подписана нода и на какие публикует информацию.

Команда rostopic info /turtle1/cmd_vel расскзывает о типе, который содержит в себе данный топик, а также все Ноды

Чтобы узнать больше о типе, нужно воспользоваться командой 
rosmsg show geometry_msgs/Twist
который состоит из 2 векторов

Для эмуляции отправления команды используем 
rostopic pub /turtle1/cmd_vel geometry_msgs/Twist
C помощью команды rostopic echo turtle1/cmd_vel мы можем отслеживать какие команды приходят

rqt_graph позволяет нап визаулизировать представление о Нодах, Топиках и Сообщениях

Вызов сервиса  

Ожидает подтверждение от подпичика, От одного к одному
rosservice list предоставляет информацию обо всех сервисах, доступных для данной программы
rosservice info/clear Даёт информацию о сервисе
rosservice call /clear проиводит очищение только траектории у второй черепашки
rossrv show std_srvs/Empty даёт нам информацию о типе 
