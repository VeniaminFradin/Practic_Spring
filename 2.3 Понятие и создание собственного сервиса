Сервис отличается от обычного сообщения тем, что Нода не ждёт подтверждения о получении сообщения.
Сервис посылается Ноде и связь получается 1 к 1 с откликом
Сервис состоит из Запрос и Ответ. Запрос состоит из 2 целочисленных переменных - Ответ из 1
Нода клиент и Нода Вервер
Клиент отправляет 2 числа серверу, сервер будет принимать 2 числа, складывать их и отправлять клиенту
По правилам создаём пакет и в нём называем папку srv
В нём создаём сам файл с расширением .srv 
Область ответа отделяется от области вопроса 3 занками "минус"
В CMakeLists осуществляем конфигурацию работы нашего сервиса
В папке devel/include/my_service имеется 3 файла Request Response
В первом создаюстя типы
rosservice и rossrv отличаются тем что последний работает со всеми типами
первый показывает только доступные 
Теперь займёмся созданием своего клиента и своего сервера
начало одинаковое - создаём 2 пакета - для сервера и для клиента
Если необходимо компилировать пакеты (например, package1 и package2), которые используют сообщение или сервис,
генерируемый в package3, причём скомпилировать package3 отдельно нет возможности,
для установки корректного порядка компиляции (предотвращения компиляции пакетов package1 и package2 до пакета package3)
в CMakeLists.txt первых пакетов следует после строк
add_executable(<node_type> <source_files> )
target_link_libraries(<node_type> ${catkin_LIBRARIES})
следует добавить строку
add_dependencies(<node_type> <name_of_package3>_generate_messages_cpp)

Эту же строку следует добавить и в CMakeLists.txt пакета package3,
если он создаёт ноды, использующие сообщения и сервисы этого пакета.
